package translator.Statements;
import translator.JavaScope;
import translator.Expressions.ConditionalExpression;
import translator.Printer.CodeBlock;
import java.util.ArrayList;
import xtc.tree.Node;
import xtc.tree.GNode;
class JavaWhileStatement extends JavaStatement{
	JavaWhileStatement(JavaScope scope, GNode n){
		super(scope, n);
	}
	protected void onInstantiate(GNode n){
                header=(JavaScope)dispatch((GNode)n.get(1));
		final GNode g=(GNode)n.get(0);
		if (g!=null){
			Object o=dispatch(g);
			if (o instanceof CodeBlock){
				b.add((CodeBlock)o);
			}else{
				/** if it is blockless, then we might just want to add a block around it in our translation
				(and we might want to find a better way other than an instanceof test...) **/
				b.add(((JavaStatement)o).printMe(new CodeBlock()));
			}
		}
	}
	public CodeBlock printMe(CodeBlock block){
		return block.block("do",true).attach((CodeBlock)b.get(0)).close().p("while ("+((JavaExpression)header).print()+");");
	}
}
